<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Crypto Trading Strategy Generator</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.3/dist/tailwind.min.css" rel="stylesheet">
    <style>
        body {
            font-family: 'Roboto', sans-serif;
        }
    </style>
</head>
<body class="bg-gray-100">
    <div class="max-w-md mx-auto mt-10 p-6 bg-white rounded-lg shadow-md">
        <h1 class="text-2xl font-semibold mb-4 text-center text-gray-800">Crypto Trading Strategy Generator</h1>
        <form id="cryptoForm">
            <div class="mb-4">
                <label class="block text-sm font-medium text-gray-700 mb-2" for="amount">Amount of Bitcoin to Buy/Sell</label>
                <input type="number" id="amount" name="amount" class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md" required>
            </div>
            <div class="mb-4">
                <label class="block text-sm font-medium text-gray-700 mb-2" for="currentHoldings">Current Bitcoin Holdings</label>
                <input type="number" id="currentHoldings" name="currentHoldings" class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md" required>
            </div>
            <div class="mb-4">
                <label class="block text-sm font-medium text-gray-700 mb-2" for="strategyGoal">Trading Strategy or Goal</label>
                <input type="text" id="strategyGoal" name="strategyGoal" class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md" required>
            </div>
            <div class="mb-4">
                <label class="block text-sm font-medium text-gray-700 mb-2" for="qrCode">Link My QR Code Address</label>
                <input type="text" id="qrCode" name="qrCode" value="bc1qnheuzy3fp2t8zwmhgq85kl9ju05m6yaharnjfp" class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md" readonly>
            </div>
            <button type="submit" class="w-full bg-indigo-600 text-white py-2 px-4 rounded-md hover:bg-indigo-700">Let's Crypto'n'Roll! üöÄ</button>
        </form>

        <div id="output" class="mt-6 p-4 bg-gray-100 rounded-lg text-gray-700">
            <!-- Output will be displayed here -->
        </div>
    </div>

    <footer class="mt-10 text-center text-gray-500 text-sm">
        <a href="#" class="hover:underline">Made with ‚ù§Ô∏è</a>
    </footer>

    <script>
        document.getElementById("cryptoForm").addEventListener("submit", function(event) {
            event.preventDefault();
            const amount = document.getElementById("amount").value;
            const currentHoldings = document.getElementById("currentHoldings").value;
            const strategyGoal = document.getElementById("strategyGoal").value;
            
            const prompt = `
                Generate a trading strategy for someone looking to buy/sell Bitcoin. 
                Consider their current Bitcoin holdings, the amount of Bitcoin they want to trade, 
                and their trading goals. Provide insights on when to buy/sell, potential market trends, 
                and risk management strategies. Current Holdings: ${currentHoldings}, 
                Trade Amount: ${amount}, Goal: ${strategyGoal}.
            `;
            
            const websocket = new WebSocket("wss://backend.buildpicoapps.com/ask_ai_streaming_v2");
            const output = document.getElementById("output");
            output.innerHTML = ""; // Clear previous output
            
            websocket.addEventListener("open", () => {
                websocket.send(
                    JSON.stringify({
                        appId: "well-office",
                        prompt: prompt,
                    })
                );
            });
            
            websocket.addEventListener("message", (event) => {
                console.log(event.data);
                output.innerText = `${output.innerText}${event.data}`;
            });

            websocket.addEventListener("close", (event) => {
                console.log("Connection closed", event.code, event.reason);
                if (event.code != 1000) {
                    alert("Oops, we ran into an error. Refresh the page and try again.");
                }
            });

            websocket.addEventListener("error", (error) => {
                console.log('WebSocket error', error);
                alert("Oops, we ran into an error. Refresh the page and try again.");
            });
        });
    </script>
</body>
</html>
